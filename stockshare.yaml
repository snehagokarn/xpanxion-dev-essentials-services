swagger: '2.0'
info:
  description: >-
    stock share apis are a way to get people up the leader board in terms of points/stocks given to them by colleagues
  version: 1.0.0
  title: Stock Share
  termsOfService: ''
  contact:
    email: snehag@xpanxion.co.in
    
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: rocketshare.swagger.io
basePath: /v1
tags:
  - name: user
    description: User is the user in the system
   
  - name: stock
    description: User stock will help you get and set values for points
   
  - name: Login
    description: FB/Google/Active directory integrations here.
    
schemes:
  - http
paths:
  /users:
    post:
      tags:
        - user
      summary: Add a new user
      description: ''
      operationId: addUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: user object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '405':
          description: Invalid input
    put:
      tags:
        - user
      summary: Update an existing user
      description: ''
      operationId: updateUser
      consumes:
        - application/json
        
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: user object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
     
  '/user/stocks/{userId}':
    get:
      tags:
        - stock
      summary: Returns user stocks given and recieved
      description: Returns user stocks given and recieved
      operationId: getStocksUserById
      produces:
        
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
      
  '/user/stocks/{userId}/uploadImage':
    post:
      tags:
        - stock
      summary: uploads an image of the user you want to give stocks to
      description: ''
      operationId: uploadFile
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user to update
          required: true
          type: integer
          format: int64
        - name: additionalMetadata
          in: formData
          description: Additional data to pass to server
          required: false
          type: string
        - name: file
          in: formData
          description: file to upload
          required: false
          type: file
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
      
  /user/stocks/leaders:
    get:
      tags:
        - stock
      summary: Returns the top 5 users total points, latest picture and latest comments given to them. 
      description: ''
      operationId: getLeaderStocks
      produces:
        - application/json
      parameters: []
      responses:
        '200':
         description: successful operation
         schema:
          $ref: '#/definitions/UserStock'
              
      
  /user/stocks:
    post:
      tags:
        - stock
      summary: Give stocks to a person
      description: ''
      operationId: insertUserStocks
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: user stock you want to give your
          required: true
          schema:
            $ref: '#/definitions/UserStock'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid Order
  '/user/login/{username}':
    get:
      tags:
        - login
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
      - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  '/user/{userId}':
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserId
      produces:
      - application/json
      parameters:
        - name: userId
          in: path
          description: 'The id that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid userid supplied
        '404':
          description: User not found
definitions:
  UserStock:
    type: object
    properties:
      getterUserId:
        type: integer
        format: int64
      giverUserId:
        type: integer
        format: int64
      stock:
        type: integer
        format: int32
      createdDate:
        type: string
        format: date-time
      message:
        type: string
        description: congratulatory message the user gives to another
    xml:
      name: Order
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      emailVerified:
        type: boolean
        format: boolean
        description: Has the email been verified
      deleted:
        type: boolean
        format: boolean
        description: User is no longer using the system 
    xml:
      name: User
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string

